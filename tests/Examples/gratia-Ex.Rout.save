
R version 3.5.3 beta (2019-02-28 r76174) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gratia"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gratia')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("appraise")
> ### * appraise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: appraise
> ### Title: Model diagnostic plots
> ### Aliases: appraise
> 
> ### ** Examples
> 
> library(mgcv)
Loading required package: nlme
This is mgcv 1.8-27. For overview type 'help("mgcv-package")'.
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> ## simulate some data...
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat)
> ## run some basic model checks, including checking
> ## smoothing basis dimensions...
> appraise(mod)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("confint.fderiv")
> ### * confint.fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.fderiv
> ### Title: Point-wise and simultaneous confidence intervals for derivatives
> ###   of smooths
> ### Aliases: confint.fderiv
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(2)
> op <- options(digits = 5)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## point-wise interval
> ci <- confint(fd, type = "confidence")
> head(ci)
   term    lower    est  upper
1 s(x0) -0.84960 4.1123 9.0741
2 s(x0) -0.84895 4.1123 9.0735
3 s(x0) -0.84489 4.1125 9.0698
4 s(x0) -0.83296 4.1130 9.0589
5 s(x0) -0.81085 4.1139 9.0387
6 s(x0) -0.77697 4.1154 9.0077
> 
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> x1.sint <- confint(fd, parm = "x1", type = "simultaneous", nsim = 1000)
> head(x1.sint)
   term   lower    est  upper
1 s(x1) -5.3838 1.4232 8.2302
2 s(x1) -5.3827 1.4232 8.2291
3 s(x1) -5.3773 1.4234 8.2241
4 s(x1) -5.3665 1.4239 8.2142
5 s(x1) -5.3488 1.4246 8.1980
6 s(x1) -5.3228 1.4257 8.1742
> ## Don't show: 
> options(op)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("confint.gam")
> ### * confint.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.gam
> ### Title: Point-wise and simultaneous confidence intervals for smooths
> ### Aliases: confint.gam confint.gamm
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> ##'
> ## point-wise interval
> ci <- confint(mod, parm = "x1", type = "confidence")
> head(ci)
# A tibble: 6 x 8
  smooth by_variable       x1   est    se  crit lower upper
  <chr>  <fct>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 s(x1)  <NA>        0.000663 -1.94 0.329  1.96 -2.59 -1.30
2 s(x1)  <NA>        0.00568  -1.94 0.320  1.96 -2.57 -1.31
3 s(x1)  <NA>        0.0107   -1.93 0.312  1.96 -2.54 -1.32
4 s(x1)  <NA>        0.0157   -1.92 0.304  1.96 -2.52 -1.33
5 s(x1)  <NA>        0.0207   -1.92 0.296  1.96 -2.50 -1.34
6 s(x1)  <NA>        0.0258   -1.91 0.288  1.96 -2.47 -1.34
> ##'
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> si <- confint(mod, parm = "x1", type = "simultaneous", nsim = 100)
> head(si)
# A tibble: 6 x 8
  smooth by_variable       x1   est    se  crit lower upper
  <chr>  <fct>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 s(x1)  <NA>        0.000663 -1.94 0.329  2.26 -2.69 -1.20
2 s(x1)  <NA>        0.00568  -1.94 0.320  2.26 -2.66 -1.21
3 s(x1)  <NA>        0.0107   -1.93 0.312  2.26 -2.63 -1.23
4 s(x1)  <NA>        0.0157   -1.92 0.304  2.26 -2.61 -1.24
5 s(x1)  <NA>        0.0207   -1.92 0.296  2.26 -2.58 -1.25
6 s(x1)  <NA>        0.0258   -1.91 0.288  2.26 -2.56 -1.26
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate data over the range of variables used in smooths
> ### Aliases: datagen datagen.mgcv.smooth datagen.fs.interaction datagen.gam
> ###   datagen.gamm
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> 
> ## 1d example
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> df <- datagen(m1)
> head(df)
   term           x
1 s(x0) 0.007109038
2 s(x0) 0.012087246
3 s(x0) 0.017065454
4 s(x0) 0.022043662
5 s(x0) 0.027021870
6 s(x0) 0.032000078
> 
> ## 2d example
> dat <- gamSim(2, n = 400, dist = "normal", scale = 2)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z), data = dat$data, method = "REML")
> df <- datagen(m2)
> head(df)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.006878970 0.002381104
3 s(x,z) 0.011890823 0.002381104
4 s(x,z) 0.016902676 0.002381104
5 s(x,z) 0.021914529 0.002381104
6 s(x,z) 0.026926382 0.002381104
> ## alternative showing using the mgcv.smooth method for a single smooth
> df2 <- datagen(m2[["smooth"]][[1L]], data = dat$data)
> head(df2)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.011941448 0.002381104
3 s(x,z) 0.022015779 0.002381104
4 s(x,z) 0.032090110 0.002381104
5 s(x,z) 0.042164441 0.002381104
6 s(x,z) 0.052238771 0.002381104
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("derivatives")
> ### * derivatives
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: derivatives
> ### Title: Derivatives of estimated smooths via finite differences
> ### Aliases: derivatives derivatives.default derivatives.gamm
> ###   derivatives.gam
> 
> ### ** Examples
> 
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(42)
> op <- options(cli.unicode = FALSE)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2, verbose = FALSE)
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivative of all smooths using central finite differenc
> derivatives(mod, type = "central")
# A tibble: 800 x 8
   smooth var       data derivative    se  crit lower upper
   <chr>  <chr>    <dbl>      <dbl> <dbl> <dbl> <dbl> <dbl>
 1 s(x0)  x0    0.000239       7.41  3.33  1.96 0.874  13.9
 2 s(x0)  x0    0.00525        7.41  3.33  1.96 0.875  13.9
 3 s(x0)  x0    0.0103         7.40  3.33  1.96 0.884  13.9
 4 s(x0)  x0    0.0153         7.40  3.31  1.96 0.902  13.9
 5 s(x0)  x0    0.0203         7.39  3.30  1.96 0.929  13.8
 6 s(x0)  x0    0.0253         7.38  3.27  1.96 0.965  13.8
 7 s(x0)  x0    0.0303         7.36  3.24  1.96 1.01   13.7
 8 s(x0)  x0    0.0353         7.34  3.20  1.96 1.07   13.6
 9 s(x0)  x0    0.0403         7.32  3.15  1.96 1.14   13.5
10 s(x0)  x0    0.0453         7.29  3.10  1.96 1.21   13.4
# ... with 790 more rows
> ## Don't show: 
> options(op)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.derivatives")
> ### * draw.derivatives
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.derivatives
> ### Title: Plot derivatives of smooths
> ### Aliases: draw.derivatives
> 
> ### ** Examples
> 
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(42)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2, verbose = FALSE)
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivative of all smooths
> df <- derivatives(mod)
> draw(df)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.evaluated_smooth")
> ### * draw.evaluated_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.evaluated_smooth
> ### Title: Plot estimated smooths
> ### Aliases: draw.evaluated_smooth draw.evaluated_1d_smooth
> ###   draw.evaluated_2d_smooth geom_rug draw.evaluated_re_smooth
> ###   draw.evaluated_fs_smooth draw.evaluated_parametric_term
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> 
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sm <- evaluate_smooth(m1, "s(x2)")
> draw(sm)
> 
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(2, n = 1000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 40), data = dat$data, method = "REML")
> 
> sm <- evaluate_smooth(m2, "s(x,z)", n = 100)
> draw(sm)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.gam")
> ### * draw.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.gam
> ### Title: Plot estimated smooths from a fitted GAM
> ### Aliases: draw.gam
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> 
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> draw(m1)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("evaluate_smooth")
> ### * evaluate_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_smooth
> ### Title: Evaluate a smooth
> ### Aliases: evaluate_smooth evaluate_smooth.gam evaluate_smooth.gamm
> ###   evaluate_parametric_term evaluate_parametric_term.gam
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(2)
> op <- options(cli.unicode = FALSE, digits = 6)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> evaluate_smooth(m1, "s(x1)")
# A tibble: 100 x 5
   smooth by_variable       x1   est    se
   <chr>  <fct>          <dbl> <dbl> <dbl>
 1 s(x1)  <NA>        0.000663 -1.94 0.329
 2 s(x1)  <NA>        0.0108   -1.93 0.312
 3 s(x1)  <NA>        0.0208   -1.92 0.296
 4 s(x1)  <NA>        0.0309   -1.90 0.281
 5 s(x1)  <NA>        0.0410   -1.89 0.267
 6 s(x1)  <NA>        0.0511   -1.87 0.255
 7 s(x1)  <NA>        0.0612   -1.86 0.243
 8 s(x1)  <NA>        0.0713   -1.84 0.234
 9 s(x1)  <NA>        0.0814   -1.83 0.225
10 s(x1)  <NA>        0.0914   -1.81 0.218
# ... with 90 more rows
> 
> ## 2d example
> set.seed(2)
> dat <- gamSim(2, n = 1000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 30), data = dat$data, method = "REML")
> 
> evaluate_smooth(m2, "s(x,z)", n = 100)
# A tibble: 10,000 x 6
   smooth by_variable        x        z    est    se
   <chr>  <fct>          <dbl>    <dbl>  <dbl> <dbl>
 1 s(x,z) <NA>        0.000663 0.000762 0.0881 0.189
 2 s(x,z) <NA>        0.0108   0.000762 0.0922 0.186
 3 s(x,z) <NA>        0.0208   0.000762 0.0965 0.183
 4 s(x,z) <NA>        0.0309   0.000762 0.101  0.180
 5 s(x,z) <NA>        0.0410   0.000762 0.105  0.176
 6 s(x,z) <NA>        0.0511   0.000762 0.110  0.173
 7 s(x,z) <NA>        0.0612   0.000762 0.115  0.170
 8 s(x,z) <NA>        0.0713   0.000762 0.120  0.166
 9 s(x,z) <NA>        0.0814   0.000762 0.125  0.163
10 s(x,z) <NA>        0.0914   0.000762 0.130  0.160
# ... with 9,990 more rows
> ## Don't show: 
> options(op)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fderiv")
> ### * fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fderiv
> ### Title: First derivatives of fitted GAM functions
> ### Aliases: fderiv fderiv.gam fderiv.gamm
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> ## Models with factors
> set.seed(2)
> dat <- gamSim(4, n = 400, dist = "normal", scale = 2)
Factor `by' variable example
> mod <- gam(y ~ s(x0) + s(x1) + fac, data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fix_offset")
> ### * fix_offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_offset
> ### Title: Fix the names of a data frame containing an offset variable.
> ### Aliases: fix_offset
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> df <- gamSim(1, n = 400, dist = "normal")
Gu & Wahba 4 term additive model
> m <- gam(y ~ s(x0) + s(x1) + offset(x2), data = df, method = "REML")
> names(model.frame(m))
[1] "y"          "offset(x2)" "x0"         "x1"        
> names(fix_offset(m, model.frame(m), offset_val = 1L))
[1] "y"  "x2" "x0" "x1"
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("is_offset")
> ### * is_offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_offset
> ### Title: Is a model term an offset?
> ### Aliases: is_offset
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> df <- gamSim(1, n = 400, dist = "normal")
Gu & Wahba 4 term additive model
> m <- gam(y ~ s(x0) + s(x1) + offset(x0), data = df, method = "REML")
> nm <- names(model.frame(m))
> nm
[1] "y"          "offset(x0)" "x0"         "x1"        
> is_offset(nm)
[1] FALSE  TRUE FALSE FALSE
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("qq_plot")
> ### * qq_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qq_plot
> ### Title: Quantile-quantile plot of model residuals
> ### Aliases: qq_plot qq_plot.gam
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## simulate binomial data...
> set.seed(0)
> n.samp <- 200
> dat <- gamSim(1, n = n.samp, dist = "binary", scale = .33)
Gu & Wahba 4 term additive model
> p <- binomial()$linkinv(dat$f)               # binomial p
> n <- sample(c(1, 3), n.samp, replace = TRUE) # binomial n
> dat <- transform(dat, y = rbinom(n, n, p), n = n)
> m <- gam( y / n ~ s(x0) + s(x1) + s(x2) + s(x3),
+          family = binomial, data = dat, weights = n,
+          method = "REML")
> 
> ## Q-Q plot; default using direct randomization of uniform quantiles
> qq_plot(m)
> 
> ## Alternatively use simulate new data from the model, which
> ## allows construction of reference intervals for the Q-Q plot
> qq_plot(m, method = "simulate")
> 
> ## ... or use the usual normality assumption
> qq_plot(m, method = "normal")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("seq_min_max")
> ### * seq_min_max
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seq_min_max
> ### Title: Create a sequence of evenly-spaced values
> ### Aliases: seq_min_max
> 
> ### ** Examples
> 
> ## Don't show: 
> set.seed(1)
> ## End(Don't show)
> x <- rnorm(10)
> n <- 10L
> seq_min_max(x, n = n)
 [1] -0.83562861 -0.56552757 -0.29542652 -0.02532547  0.24477557  0.51487662
 [7]  0.78497766  1.05507871  1.32517976  1.59528080
> 
> 
> 
> cleanEx()
> nameEx("simulate")
> ### * simulate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate.gam
> ### Title: Simulate from the posterior distribution of a GAM
> ### Aliases: simulate.gam simulate.gamm simulate.scam
> 
> ### ** Examples
> 
> suppressPackageStartupMessages(library("mgcv"))
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sims <- simulate(m1, nsim = 5, seed = 42)
> head(sims)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 11.445470 11.374304 10.098681  7.264881  8.796630
[2,]  6.510912  5.909584  9.057362  7.698084 11.444781
[3,]  3.837995  3.230610  3.550240  3.759380  4.774581
[4,] 12.361830 11.209226 10.714215 11.861957 10.746417
[5,] 14.851461 12.911440 11.356984 15.783913 15.106270
[6,]  5.921276  4.158963  5.520856  7.973614  9.654888
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  18.241 0.134 18.497 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
