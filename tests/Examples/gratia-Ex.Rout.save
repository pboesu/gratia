
R version 3.5.1 Patched (2018-08-31 r75235) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gratia"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gratia')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("appraise")
> ### * appraise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: appraise
> ### Title: Model diagnostic plots
> ### Aliases: appraise
> 
> ### ** Examples
> 
> library(mgcv)
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> ## simulate some data...
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat)
> ## run some basic model checks, including checking
> ## smoothing basis dimensions...
> appraise(mod)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("confint.fderiv")
> ### * confint.fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.fderiv
> ### Title: Point-wise and simultaneous confidence intervals for derivatives
> ###   of smooths
> ### Aliases: confint.fderiv
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## point-wise interval
> ci <- confint(fd, type = "confidence")
> head(ci)
   term      lower      est    upper
1 s(x0) -0.8496033 4.112256 9.074116
2 s(x0) -0.8489453 4.112287 9.073519
3 s(x0) -0.8448850 4.112468 9.069821
4 s(x0) -0.8329611 4.112988 9.058936
5 s(x0) -0.8108549 4.113933 9.038721
6 s(x0) -0.7769722 4.115360 9.007693
> 
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> x1.sint <- confint(fd, parm = "x1", type = "simultaneous", nsim = 1000)
> head(x1.sint)
   term     lower      est    upper
1 s(x1) -5.383827 1.423165 8.230157
2 s(x1) -5.382662 1.423211 8.229084
3 s(x1) -5.377287 1.423425 8.224137
4 s(x1) -5.366493 1.423860 8.214213
5 s(x1) -5.348794 1.424591 8.197975
6 s(x1) -5.322803 1.425697 8.174198
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("confint.gam")
> ### * confint.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint.gam
> ### Title: Point-wise and simultaneous confidence intervals for smooths
> ### Aliases: confint.gam confint.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> ##'
> ## point-wise interval
> ci <- confint(mod, parm = "x1", type = "confidence")
> head(ci)
# A tibble: 6 x 8
  smooth by_variable       x1   est    se  crit lower upper
  <chr>  <fct>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 s(x1)  <NA>        0.000663  5.89 0.313  1.96  5.27  6.50
2 s(x1)  <NA>        0.00568   5.90 0.305  1.96  5.30  6.49
3 s(x1)  <NA>        0.0107    5.90 0.296  1.96  5.32  6.48
4 s(x1)  <NA>        0.0157    5.91 0.287  1.96  5.35  6.47
5 s(x1)  <NA>        0.0207    5.92 0.279  1.96  5.37  6.46
6 s(x1)  <NA>        0.0258    5.92 0.271  1.96  5.39  6.46
> ##'
> ## simultaneous interval for smooth term of x1
> set.seed(42)
> si <- confint(mod, parm = "x1", type = "simultaneous", nsim = 100)
> head(si)
# A tibble: 6 x 8
  smooth by_variable       x1   est    se  crit lower upper
  <chr>  <fct>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1 s(x1)  <NA>        0.000663  5.89 0.313  2.60  5.07  6.70
2 s(x1)  <NA>        0.00568   5.90 0.305  2.60  5.10  6.69
3 s(x1)  <NA>        0.0107    5.90 0.296  2.60  5.13  6.67
4 s(x1)  <NA>        0.0157    5.91 0.287  2.60  5.16  6.66
5 s(x1)  <NA>        0.0207    5.92 0.279  2.60  5.19  6.64
6 s(x1)  <NA>        0.0258    5.92 0.271  2.60  5.22  6.63
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate data over the range of variables used in smooths
> ### Aliases: datagen datagen.mgcv.smooth datagen.fs.interaction datagen.gam
> ###   datagen.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> 
> ## 1d example
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> df <- datagen(m1)
> head(df)
   term           x
1 s(x0) 0.007109038
2 s(x0) 0.012087246
3 s(x0) 0.017065454
4 s(x0) 0.022043662
5 s(x0) 0.027021870
6 s(x0) 0.032000078
> 
> ## 2d example
> dat <- gamSim(2, n = 400, dist = "normal", scale = 2)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z), data = dat$data, method = "REML")
> df <- datagen(m2)
> head(df)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.006878970 0.002381104
3 s(x,z) 0.011890823 0.002381104
4 s(x,z) 0.016902676 0.002381104
5 s(x,z) 0.021914529 0.002381104
6 s(x,z) 0.026926382 0.002381104
> ## alternative showing using the mgcv.smooth method for a single smooth
> df2 <- datagen(m2[["smooth"]][[1L]], data = dat$data)
> head(df2)
  smooth          x1          x2
1 s(x,z) 0.001867117 0.002381104
2 s(x,z) 0.011941448 0.002381104
3 s(x,z) 0.022015779 0.002381104
4 s(x,z) 0.032090110 0.002381104
5 s(x,z) 0.042164441 0.002381104
6 s(x,z) 0.052238771 0.002381104
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("derivatives")
> ### * derivatives
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: derivatives
> ### Title: Derivatives of estimated smooths via finite differences
> ### Aliases: derivatives derivatives.default derivatives.gamm
> ###   derivatives.gam
> 
> ### ** Examples
> 
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> ## Don't show: 
> set.seed(42)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2, verbose = FALSE)
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivative of all smooths
> derivatives(mod)
# A tibble: 800 x 8
   smooth var       data derivative    se  crit lower upper
   <chr>  <chr>    <dbl>      <dbl> <dbl> <dbl> <dbl> <dbl>
 1 s(x0)  x0    0.000239       7.41  3.33  1.96 0.874  13.9
 2 s(x0)  x0    0.00525        7.41  3.33  1.96 0.875  13.9
 3 s(x0)  x0    0.0103         7.40  3.33  1.96 0.884  13.9
 4 s(x0)  x0    0.0153         7.40  3.31  1.96 0.902  13.9
 5 s(x0)  x0    0.0203         7.39  3.30  1.96 0.929  13.8
 6 s(x0)  x0    0.0253         7.38  3.27  1.96 0.965  13.8
 7 s(x0)  x0    0.0303         7.36  3.24  1.96 1.01   13.7
 8 s(x0)  x0    0.0353         7.34  3.20  1.96 1.07   13.6
 9 s(x0)  x0    0.0403         7.32  3.15  1.96 1.14   13.5
10 s(x0)  x0    0.0453         7.29  3.10  1.96 1.21   13.4
# ... with 790 more rows
> 
> ## second derivative of smooth of x2 only using central finite difference
> derivatives(mod, "s(x2)", order = 2, type = "central")
# A tibble: 200 x 8
   smooth var      data derivative    se  crit  lower upper
   <chr>  <chr>   <dbl>      <dbl> <dbl> <dbl>  <dbl> <dbl>
 1 s(x2)  x2    0.00359      -9.06 12.0   1.96 -32.5   14.4
 2 s(x2)  x2    0.00860      20.1  12.8   1.96  -5.05  45.2
 3 s(x2)  x2    0.0136       -1.64  6.94  1.96 -15.2   12.0
 4 s(x2)  x2    0.0186       19.5  18.6   1.96 -17.0   55.9
 5 s(x2)  x2    0.0236       21.7  29.9   1.96 -36.9   80.2
 6 s(x2)  x2    0.0286       34.8  36.2   1.96 -36.1  106. 
 7 s(x2)  x2    0.0336       66.7  54.7   1.96 -40.4  174. 
 8 s(x2)  x2    0.0386       66.1  66.1   1.96 -63.4  196. 
 9 s(x2)  x2    0.0436       90.1  80.3   1.96 -67.3  247. 
10 s(x2)  x2    0.0486       83.2  86.5   1.96 -86.4  253. 
# ... with 190 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.derivatives")
> ### * draw.derivatives
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.derivatives
> ### Title: Plot derivatives of smooths
> ### Aliases: draw.derivatives
> 
> ### ** Examples
> 
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> ## Don't show: 
> set.seed(42)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2, verbose = FALSE)
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivative of all smooths
> df <- derivatives(mod)
> draw(df)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.evaluated_smooth")
> ### * draw.evaluated_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.evaluated_smooth
> ### Title: Plot estimated smooths
> ### Aliases: draw.evaluated_smooth draw.evaluated_1d_smooth
> ###   draw.evaluated_2d_smooth draw.evaluated_re_smooth
> ###   draw.evaluated_fs_smooth draw.evaluated_parametric_term
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> 
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sm <- evaluate_smooth(m1, "s(x2)")
> draw(sm)
> 
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 40), data = dat$data, method = "REML")
> 
> sm <- evaluate_smooth(m2, "s(x,z)", n = 100)
> draw(sm)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("draw.gam")
> ### * draw.gam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draw.gam
> ### Title: Plot estimated smooths from a fitted GAM
> ### Aliases: draw.gam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> 
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> draw(m1)
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("evaluate_smooth")
> ### * evaluate_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: evaluate_smooth
> ### Title: Evaluate a smooth
> ### Aliases: evaluate_smooth evaluate_smooth.gam evaluate_smooth.gamm
> ###   evaluate_parametric_term evaluate_parametric_term.gam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> head(evaluate_smooth(m1, "s(x1)"))
# A tibble: 6 x 5
  smooth by_variable       x1   est    se
  <chr>  <fct>          <dbl> <dbl> <dbl>
1 s(x1)  <NA>        0.000663 -1.94 0.313
2 s(x1)  <NA>        0.0108   -1.93 0.296
3 s(x1)  <NA>        0.0208   -1.92 0.279
4 s(x1)  <NA>        0.0309   -1.90 0.263
5 s(x1)  <NA>        0.0410   -1.89 0.248
6 s(x1)  <NA>        0.0511   -1.87 0.235
> 
> ## 2d example
> set.seed(2)
> dat <- gamSim(2, n = 4000, dist = "normal", scale = 1)
Bivariate smoothing example
> m2 <- gam(y ~ s(x, z, k = 30), data = dat$data, method = "REML")
> 
> head(evaluate_smooth(m2, "s(x,z)", n = 100))
# A tibble: 6 x 6
  smooth by_variable         x         z   est    se
  <chr>  <fct>           <dbl>     <dbl> <dbl> <dbl>
1 s(x,z) <NA>        0.0000230 0.0000432 0.123 0.115
2 s(x,z) <NA>        0.0101    0.0000432 0.122 0.112
3 s(x,z) <NA>        0.0202    0.0000432 0.121 0.110
4 s(x,z) <NA>        0.0303    0.0000432 0.120 0.107
5 s(x,z) <NA>        0.0404    0.0000432 0.119 0.105
6 s(x,z) <NA>        0.0505    0.0000432 0.117 0.102
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fderiv")
> ### * fderiv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fderiv
> ### Title: First derivatives of fitted GAM functions
> ### Aliases: fderiv fderiv.gam fderiv.gamm
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> set.seed(2)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> mod <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> ## Models with factors
> set.seed(2)
> dat <- gamSim(4, n = 400, dist = "normal", scale = 2)
Factor `by' variable example
> mod <- gam(y ~ s(x0) + s(x1) + fac, data = dat, method = "REML")
> 
> ## first derivatives of all smooths...
> fd <- fderiv(mod)
> 
> ## ...and a selected smooth
> fd2 <- fderiv(mod, term = "x1")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("fix_offset")
> ### * fix_offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_offset
> ### Title: Fix the names of a data frame containing an offset variable.
> ### Aliases: fix_offset
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> df <- gamSim(1, n = 400, dist = "normal")
Gu & Wahba 4 term additive model
> m <- gam(y ~ s(x0) + s(x1) + offset(x2), data = df, method = "REML")
> names(model.frame(m))
[1] "y"          "offset(x2)" "x0"         "x1"        
> names(fix_offset(m, model.frame(m), offset_val = 1L))
[1] "y"  "x2" "x0" "x1"
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("is_offset")
> ### * is_offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_offset
> ### Title: Is a model term an offset?
> ### Aliases: is_offset
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> df <- gamSim(1, n = 400, dist = "normal")
Gu & Wahba 4 term additive model
> m <- gam(y ~ s(x0) + s(x1) + offset(x0), data = df, method = "REML")
> nm <- names(model.frame(m))
> nm
[1] "y"          "offset(x0)" "x0"         "x1"        
> is_offset(nm)
[1] FALSE  TRUE FALSE FALSE
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("qq_plot")
> ### * qq_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qq_plot
> ### Title: Quantile-quantile plot of model residuals
> ### Aliases: qq_plot qq_plot.gam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> ## simulate binomial data...
> set.seed(0)
> n.samp <- 200
> dat <- gamSim(1, n = n.samp, dist = "binary", scale = .33)
Gu & Wahba 4 term additive model
> p <- binomial()$linkinv(dat$f)               # binomial p
> n <- sample(c(1, 3), n.samp, replace = TRUE) # binomial n
> dat <- transform(dat, y = rbinom(n, n, p), n = n)
> m <- gam( y / n ~ s(x0) + s(x1) + s(x2) + s(x3),
+          family = binomial, data = dat, weights = n,
+          method = "REML")
> 
> ## Q-Q plot; default using direct randomization of uniform quantiles
> qq_plot(m)
> 
> ## ... or use the usual normality assumption
> qq_plot(m, method = "normal")
> 
> 
> 
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("seq_min_max")
> ### * seq_min_max
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seq_min_max
> ### Title: Create a sequence of evenly-spaced values
> ### Aliases: seq_min_max
> 
> ### ** Examples
> 
> ## Don't show: 
> set.seed(1)
> ## End(Don't show)
> x <- rnorm(10)
> n <- 10L
> seq_min_max(x, n = n)
 [1] -0.83562861 -0.56552757 -0.29542652 -0.02532547  0.24477557  0.51487662
 [7]  0.78497766  1.05507871  1.32517976  1.59528080
> 
> 
> 
> cleanEx()
> nameEx("simulate")
> ### * simulate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate.gam
> ### Title: Simulate from the posterior distribution of a GAM
> ### Aliases: simulate.gam simulate.gamm simulate.scam
> 
> ### ** Examples
> 
> library("mgcv")
Loading required package: nlme
This is mgcv 1.8-26. For overview type 'help("mgcv-package")'.
> ## Don't show: 
> set.seed(2)
> ## End(Don't show)
> dat <- gamSim(1, n = 400, dist = "normal", scale = 2)
Gu & Wahba 4 term additive model
> m1 <- gam(y ~ s(x0) + s(x1) + s(x2) + s(x3), data = dat, method = "REML")
> 
> sims <- simulate(m1, nsim = 5, seed = 42)
> head(sims)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 11.445470 11.374304 10.098681  7.264881  8.796630
[2,]  6.510912  5.909584  9.057362  7.698084 11.444781
[3,]  3.837995  3.230610  3.550240  3.759380  4.774581
[4,] 12.361830 11.209226 10.714215 11.861957 10.746417
[5,] 14.851461 12.911440 11.356984 15.783913 15.106270
[6,]  5.921276  4.158963  5.520856  7.973614  9.654888
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  21.06 0.148 21.264 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
